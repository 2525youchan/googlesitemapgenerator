#summary A quick guide to build binary from source code.
#labels Featured,Phase-Implementation,Phase-Deploy

= How To Build Source Code? =
----
== Build Under Linux ==
Users can build a binary from source by themselves. There are two steps.

=== Prerequisite ===
  * gcc-4.0+ (including g++) is the supported building tool.
  * GNU Make 3.81 is required. Others are not verified.

=== Generate Makefile with configure script ===
_configure_ script is a standard configuration script generated by autoconf.

==== Options ====
Besides common configuration options like CC, CPPFLAGS, and etc, some other
options are provided. Note, options for C++ are ignored, like CXX, CXXFLAGS.
In Makefile, gcc is used as the front end to compile and link C++. As a
result, CFLAGS is also applied to C++ source file.

 * --with-apache-bin=APACHE_BINARY_PATH
  This option tells the script the target apache instance. The script can
  retrieve apache version information and architecture information from it.
 * --with-apache-version=1.3|1.3.e|2.0|2.2
  This option specifies version of target apache instance. Specially, 1.3.e
  is used for apache 1.3.x with EAPI defined.
 * --with-apache-arch=32|64
  This option specifies target cpu architecture of apache instance. 32 is
  used for i386 Linux, while 64 is used for x86_64 Linux.

==== Sample ====
 * ./configure --with-apache-bin=/usr/sbin/httpd CC=/usr/bin/gcc-4.1
  This will generate a Makefile, which is used to build binary for
  /usr/sbin/httpd. The building tool is /usr/bin/gcc-4.1.
 * ./configure --with-apache-version=1.3.e --with-apache-arch=32
  This will generate a Makefile, which is used to build binary for
  apache version 1.3 with EAPI defined.

=== Run Makefile to build the binary ===
==== Targets ====
 * all
  Build binary files and leave them in source directories.
  This is the default make target.
 * clean
   Clean binary files from source directories.
 * distclean
   "clean", and remove files generated by configure script.
 * installer
   "all", and copy binary files to ./sitemap-install directory.
 * install
   "installer", and start to install automatically.

----
== Build Under Windows ==
=== Prerequisite ===
 * Microsoft Windows SDK 6.0
 * Microsfot Visual Studio 2005
 * Set Windows SDK 6.0 as the default platform SDK in Visual Studio 2005. It can be set in Tools->Options->Project and Solutions->VC++ Directories.


=== Steps to build MSI package ===
 * Open sitemap.sln with Miscrosoft Visual Studio 2005.
 * Change "Configuration" to "Release", and "Platform" to "x64". Build IIS6_Filter and IIS7_Module project under this setting.
 * Change "Configuration" to "Release", and "Platform" to "Win32". Build IIS6_Filter, IIS7_Module, and SitemapService under this setting.
 * Build "SitemapSetup" project. Find installation package in ./Release/sitemap_setup.msi 